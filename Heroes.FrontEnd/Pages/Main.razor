@page "/"
@inherits LayoutComponentBase
@inject HttpClient Http;
@inject IHeroService HeroService;

<PageTitle>Heroes</PageTitle>

<MudThemeProvider IsDarkMode />
<MudDialogProvider />
<MudSnackbarProvider />

@if (HeroService.Heroes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudLayout>

        <MudAppBar Elevation="0">
            <MudSpacer />
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/GabrielGonMorais" Target="_blank" />
        </MudAppBar>

        <MudMainContent>

            <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

                <MudGrid Justify="Justify.Center">
                    @foreach (var hero in HeroService.Heroes)
                    {
                        <MudItem md="3" sm="6" xs="12">
                            <div class="card" style="background-image: url(@hero.Image); background-size: cover;">
                                <div class="shader">

                                    <img src="@(hero.Comic.Name + ".png")" class="cmc-icon" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" DisableElevation="true" DisableRipple="true"
                                           OnClick="(() => DeleteHero(hero.ID))" Class="delete-icon" />
                                    <div class="textcard">
                                        <MudText Class="info" Typo="Typo.h5">@hero.HeroName</MudText>
                                        <MudText Class="info" Typo="Typo.h6">@hero.AlterEgo</MudText>
                                        <p class="info">@hero.Info</p>
                                    </div>

                                </div>
                            </div>
                        </MudItem>
                    }

                    <MudItem xs="12" sm="6" md="3">
                        <div class="card" style="background:hsl(20 0% 0% / 0.3) 50%">
                            <EditForm Model="@HeroService.Hero" Class="form">
                                <MudTextField Label="Hero's Name" @bind-Value="HeroService.Hero.HeroName" />
                                <MudTextField Label="Alter-Ego" @bind-Value="HeroService.Hero.AlterEgo" />
                                <MudTextField Label="Info" @bind-Value="HeroService.Hero.Info" />
                                <MudTextField Label="URL Image" @bind-Value="HeroService.Hero.Image" />

                                <MudSelect @bind-Value="HeroService.Hero.ComicID">
                                    @foreach (var comic in HeroService.Comics)
                                    {
                                    <MudSelectItem Value="@comic.ID">@comic.Name</MudSelectItem>
                                    }
                            </MudSelect>

                            <MudSpacer />
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(e => PostHero(HeroService.Hero))"
                                       Class="ml-auto">Add</MudButton>
                        </EditForm>
                    </div>

                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudMainContent>
</MudLayout>
}

@code {

    [Inject] private IDialogService DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await HeroService.GetHero();
        await HeroService.GetComic();
    }

    protected async Task PostHero(Hero hero)
    {
        await HeroService.PostHero(hero);
        await OnInitializedAsync();
    }

    protected async Task DeleteHero(int ID)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure?",
            yesText: "Delete!", cancelText: "Cancel");

        switch (result)
        {
            case true:
                await HeroService.DeleteHero(ID);
                await OnInitializedAsync();
                break;
            case null:
                await OnInitializedAsync();
                break;
            case false:
                await OnInitializedAsync();
                break;
        }
    }

   
}